[package]
name = "uniffi-example-arithmetic"
edition = "2021"
version = "0.22.0"
license = "MPL-2.0"
publish = false

[lib]
crate-type = ["lib", "cdylib"]
name = "arithmetical"

[dependencies]
uniffi = { version = "0.28.3", features=["scaffolding-ffi-buffer-fns", "cli"] }
thiserror = "1.0"
async-std = "1.13.0"

# The features of surf will get changed by build.py depending on if we're building for wasm or not
# See https://github.com/rust-lang/cargo/issues/1197
# If this is the only change in a commit, assume it's a mistake because build.py should always reset it
surf = { version = "2.3.2" }

wasm-bindgen = "0.2.97"
getrandom = { version = "0.2.15", features = ["js"] }
wasm-bindgen-futures = "0.4.47"
ed25519-dalek = { version = "2.1.1", features = ["rand_core"] }
rand = "0.8.5"
console_error_panic_hook = "0.1.7"

[target.'cfg(target_arch = "wasm32")'.dependencies]
wasm32-unknown-unknown-openbsd-libc = "0.2"

[build-dependencies]
cc = "1.2.2"
# Add the "scaffolding-ffi-buffer-fns" feature to make sure things can build correctly
uniffi = { version = "0.28.3", features = ["build", "scaffolding-ffi-buffer-fns"] }

[dev-dependencies]
uniffi = { version = "0.28.3", features = ["bindgen-tests"] }

[patch.crates-io]
# see https://github.com/koute/stdweb/issues/427#issuecomment-2510242651
stdweb = { git = "https://github.com/Dampfwalze/stdweb/", rev = "a0086b4bd9b3116edeb679fe0ca477d48e06bb32" }

[[bin]]
# This can be whatever name makes sense for your project, but the rest of this tutorial assumes uniffi-bindgen.
name = "uniffi-bindgen"
path = "uniffi-bindgen.rs"
