[package]
name = "uniffi-example-playground"
edition = "2021"
version = "0.22.0"
license = "MPL-2.0"
publish = false

[lib]
crate-type = ["lib", "cdylib"]
name = "playground"

[dependencies]
uniffi = { version = "0.29.4", features=["scaffolding-ffi-buffer-fns", "cli", "tokio"] }
wasm-bindgen = "0.2.97"
wasm-bindgen-futures = "0.4.47"
thiserror = "1.0"
serde = "1.0.215"

# tsify with serde uses serde-wasm-bindgen under the hood to convert structs to TS types
# This makes life easier when writing rust and makes the dev experience better for JS consumers
tsify-next = { version = "0.5.4", features = ["js"] }

# reqwest is used for the HTTP client
reqwest = "0.12.9"
# tokio is used for the async runtime (specifically for reqwest)
tokio = { version= "1.42.0", features = ["time"] }

# Various packages just used for testing
ed25519-dalek = { version = "2.1.1", features = ["rand_core"] }
rand = "0.8.5"
rmp-serde = "1.3.0"
getrandom = { version = "0.2.15", features = ["js"] }
async-trait = "0.1.89"

# Needed for linking C code in wasm
[target.'cfg(target_arch = "wasm32")'.dependencies]
wasm32-unknown-unknown-openbsd-libc = "0.2"

[build-dependencies]
bindgen = "0.70.1"
cc = "1.2.2"
# Add the "scaffolding-ffi-buffer-fns" feature to make sure things can build correctly
uniffi = { version = "0.29.4", features = ["build", "scaffolding-ffi-buffer-fns"] }

[dev-dependencies]
uniffi = { version = "0.29.4" }

[[bin]]
# This can be whatever name makes sense for your project, but the rest of this tutorial assumes uniffi-bindgen.
name = "uniffi-bindgen"
path = "uniffi-bindgen.rs"

[profile.release]
# LLVM link time optimizations
# See https://rustwasm.github.io/book/reference/code-size.html#compiling-with-link-time-optimizations-lto
lto = true
